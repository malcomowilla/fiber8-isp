import React, { useState, useEffect, useCallback } from 'react';
import { motion } from 'framer-motion';
import { FaUser, FaLock } from 'react-icons/fa';
import { useNavigate } from 'react-router-dom';
import { useApplicationSettings } from '../settings/ApplicationSettings';
import { FaExclamationTriangle, FaEnvelope, FaPhone } from 'react-icons/fa';


const ClientLogin = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState('');
  const { companySettings, setCompanySettings, setSubscriberSettings,
     subscriberSettings } = useApplicationSettings();
  const navigate = useNavigate();

  const { company_name, logo_preview,  contact_info,
          email_info,
          customer_support_phone_number,
          agent_email,
          customer_support_email, } = companySettings;


const {enable_customer_portal} = subscriberSettings



const subdomain = window.location.hostname.split('.')[0];





const fetchSubscriberSettings = useCallback(
  async() => {
    try {
      const response = await fetch('/api/allow_get_subscriber_settings',{
        headers: {
          'X-Subdomain': subdomain,
        },
      })

      const newData = await response.json()
      if (response.ok){


const {

  prefix,
  minimum_digits,
  use_autogenerated_number_as_ppoe_username,
  notify_user_account_created,
  send_reminder_sms_expiring_subscriptions,
  account_number_starting_value,
  use_autogenerated_number_as_ppoe_password,
  enable_customer_portal
} = newData[0]



setSubscriberSettings(
  {...subscriberSettings, prefix:prefix, minimum_digits:minimum_digits, 
   use_autogenerated_number_as_ppoe_username: use_autogenerated_number_as_ppoe_username,
   notify_user_account_created: notify_user_account_created,
   send_reminder_sms_expiring_subscriptions: send_reminder_sms_expiring_subscriptions,
   account_number_starting_value: account_number_starting_value,
   use_autogenerated_number_as_ppoe_password: use_autogenerated_number_as_ppoe_password,
   enable_customer_portal: enable_customer_portal
  }
)
      }else{
if (response.status === 402) {
        setTimeout(() => {
          // navigate('/license-expired')
          window.location.href='/license-expired'
         }, 1800);
        
      }
if (response.status === 401) {
 
   setTimeout(() => {
          // navigate('/license-expired')
          window.location.href='/signin'
         }, 1900);
}

      }
    } catch (error) {
    
    }
  },
  [],
)



useEffect(() => {
  fetchSubscriberSettings()
}, [fetchSubscriberSettings]);




  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);
    setError('');

    try {
      const response = await fetch('/api/customer-login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Subdomain': window.location.hostname.split('.')[0],
        },
        body: JSON.stringify({ username, password }),
      });

      if (response.ok) {
        // Simply redirect on successful login
        // Backend will handle session/token in cookies
        navigate('/client-portal');
      } else {
        const data = await response.json();
        setError(data.message || 'Login failed. Please try again.');
      }
    } catch (err) {
      setError('Network error. Please try again later.');
      console.error('Login error:', err);
    } finally {
      setIsLoading(false);
    }
  };

  const handleGetCompanySettings = useCallback(async () => {
    try {
      const subdomain = window.location.hostname.split('.')[0];
      const response = await fetch('/api/allow_get_company_settings', {
        headers: {
          'X-Subdomain': subdomain,
        },
      });
      
      const newData = await response.json();
      
      if (response.ok) {
        setCompanySettings(prev => ({
          ...prev,
          ...newData,
          logo_preview: newData.logo_url,
        }));
      }
    } catch (error) {
      console.error('Error fetching company settings:', error);
    }
  }, [setCompanySettings]);

  useEffect(() => {
    handleGetCompanySettings();
  }, [handleGetCompanySettings]);

  return (
    <>
    {enable_customer_portal ? (
      
    <div className='flex items-center justify-center min-h-screen bg-white'>
      <div className="absolute inset-0 z-0">
        <img
          src="/images/Telecommunications-Aitechs.jpg"
          alt="Network Background"
          className="w-full h-full object-cover"
        />
        <div className="absolute inset-0 bg-black/60 backdrop-blur-sm"></div>
      </div>

      <motion.div
        initial={{ opacity: 0, y: -50 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.8 }}
        className='w-full max-w-md p-6 z-10 bg-white rounded-lg shadow-xl'
      >
        <div className='flex justify-center mb-6'>
          <motion.img
            className='w-24 h-24 rounded-full'
            whileHover={{ scale: 1.1 }}
            whileTap={{ scale: 0.9 }}
            src={logo_preview || "/images/aitechs.png"}
            alt={company_name || "Aitechs"}
            onError={(e) => { e.target.src = "/images/aitechs.png"; }}
          />
        </div>

        <motion.h1
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.5, duration: 0.8 }}
          className='text-3xl font-bold text-center text-gray-800 mb-6'
        >
          Customer Network
        </motion.h1>

        {error && (
          <div className="mb-4 p-2 bg-red-100 text-red-700 rounded text-center">
            {error}
          </div>
        )}

        <form onSubmit={handleSubmit}>
          <div className='mb-6'>
            <label className='block text-gray-700 text-sm font-bold mb-2' htmlFor='username'>
              Username
            </label>
            <div className='relative'>
              <FaUser className='absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400' />
              <input
                type='text'
                id='username'
                value={username}
                onChange={(e) => setUsername(e.target.value)}
                className='w-full pl-10 pr-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all'
                placeholder='Enter your username'
                required
              />
            </div>
          </div>

          <div className='mb-6'>
            <label className='block text-gray-700 text-sm font-bold mb-2' htmlFor='password'>
              Password
            </label>
            <div className='relative'>
              <FaLock className='absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400' />
              <input
                type='password'
                id='password'
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className='w-full pl-10 pr-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 transition-all'
                placeholder='Enter your password'
                required
              />
            </div>
          </div>

          <motion.button
            type='submit'
            whileHover={{ scale: 1.05 }}
            whileTap={{ scale: 0.95 }}
            className='w-full bg-blue-600 text-white py-2 px-4 rounded-lg hover:bg-blue-700 transition-all flex justify-center items-center'
            disabled={isLoading}
          >
            {isLoading ? (
              <>
                <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                Authenticating...
              </>
            ) : (
              'Login'
            )}
          </motion.button>
        </form>

        <div className='mt-6 text-center'>
          <a href='#forgot-password' className='text-blue-600 hover:underline text-sm'>
            Forgot Password?
          </a>
        </div>
      </motion.div>
    </div>
    ): <motion.div 
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
      className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-gray-100 p-4"
    >
      <motion.div
        initial={{ y: -20, scale: 0.95 }}
        animate={{ y: 0, scale: 1 }}
        transition={{ duration: 0.5, delay: 0.2 }}
        className="bg-white rounded-xl shadow-2xl p-8 max-w-md w-full text-center"
      >
        <motion.div
          animate={{ 
            rotate: [0, 10, -10, 0],
            scale: [1, 1.1, 1]
          }}
          transition={{ 
            duration: 0.8,
            ease: "easeInOut",
            times: [0, 0.2, 0.5, 0.8],
            repeatDelay: 3
          }}
          className="flex justify-center mb-6"
        >
          <FaExclamationTriangle className="text-yellow-500 text-5xl" />
        </motion.div>

        <motion.h1 
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.5, delay: 0.4 }}
          className="text-2xl font-bold text-gray-800 mb-4"
        >
          Customer Portal Not Enabled
        </motion.h1>

        <motion.p
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.5, delay: 0.6 }}
          className="text-gray-600 mb-6"
        >
          The customer portal feature is currently not enabled for your account. Please contact our support team for assistance.
        </motion.p>

        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ duration: 0.5, delay: 0.8 }}
          className="space-y-4"
        >
          <div className="flex items-center justify-center space-x-2 text-blue-600">
            <FaEnvelope className="text-lg" />
            <a href={`mailto:${customer_support_email}`} className="hover:underline">
              {customer_support_email}
            </a>
          </div>
          
          <div className="flex items-center justify-center space-x-2 text-blue-600">
            <FaPhone className="text-lg" />
            <a href={`tel:${customer_support_phone_number}`} className="hover:underline">
              {customer_support_phone_number}
            </a>
          </div>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 1 }}
          className="mt-8"
        >
          <button 
            className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-all shadow-md hover:shadow-lg"
            onClick={() => window.history.back()}
          >
            Go Back
          </button>
        </motion.div>
      </motion.div>
    </motion.div>}



    </>
  );
};

export default ClientLogin;